<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qxxg.springcloud.cloudmbg.mapper.VpnServerMapper">
  <resultMap id="BaseResultMap" type="com.qxxg.springcloud.cloudmbg.entity.VpnServer">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="server_ip" jdbcType="VARCHAR" property="serverIp" />
    <result column="server_port" jdbcType="CHAR" property="serverPort" />
    <result column="encryption_type" jdbcType="VARCHAR" property="encryptionType" />
    <result column="server_region" jdbcType="VARCHAR" property="serverRegion" />
    <result column="server_status" jdbcType="INTEGER" property="serverStatus" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="server_line" jdbcType="VARCHAR" property="serverLine" />
    <result column="server_type" jdbcType="INTEGER" property="serverType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, server_ip, server_port, encryption_type, server_region, server_status, description, 
    server_line, server_type
  </sql>
  <select id="selectByExample" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnServerExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from vpn_server
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from vpn_server
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from vpn_server
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnServerExample">
    delete from vpn_server
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnServer">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into vpn_server (server_ip, server_port, encryption_type, 
      server_region, server_status, description, 
      server_line, server_type)
    values (#{serverIp,jdbcType=VARCHAR}, #{serverPort,jdbcType=CHAR}, #{encryptionType,jdbcType=VARCHAR}, 
      #{serverRegion,jdbcType=VARCHAR}, #{serverStatus,jdbcType=INTEGER}, #{description,jdbcType=VARCHAR}, 
      #{serverLine,jdbcType=VARCHAR}, #{serverType,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnServer">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into vpn_server
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="serverIp != null">
        server_ip,
      </if>
      <if test="serverPort != null">
        server_port,
      </if>
      <if test="encryptionType != null">
        encryption_type,
      </if>
      <if test="serverRegion != null">
        server_region,
      </if>
      <if test="serverStatus != null">
        server_status,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="serverLine != null">
        server_line,
      </if>
      <if test="serverType != null">
        server_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="serverIp != null">
        #{serverIp,jdbcType=VARCHAR},
      </if>
      <if test="serverPort != null">
        #{serverPort,jdbcType=CHAR},
      </if>
      <if test="encryptionType != null">
        #{encryptionType,jdbcType=VARCHAR},
      </if>
      <if test="serverRegion != null">
        #{serverRegion,jdbcType=VARCHAR},
      </if>
      <if test="serverStatus != null">
        #{serverStatus,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="serverLine != null">
        #{serverLine,jdbcType=VARCHAR},
      </if>
      <if test="serverType != null">
        #{serverType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnServerExample" resultType="java.lang.Long">
    select count(*) from vpn_server
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update vpn_server
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.serverIp != null">
        server_ip = #{record.serverIp,jdbcType=VARCHAR},
      </if>
      <if test="record.serverPort != null">
        server_port = #{record.serverPort,jdbcType=CHAR},
      </if>
      <if test="record.encryptionType != null">
        encryption_type = #{record.encryptionType,jdbcType=VARCHAR},
      </if>
      <if test="record.serverRegion != null">
        server_region = #{record.serverRegion,jdbcType=VARCHAR},
      </if>
      <if test="record.serverStatus != null">
        server_status = #{record.serverStatus,jdbcType=INTEGER},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.serverLine != null">
        server_line = #{record.serverLine,jdbcType=VARCHAR},
      </if>
      <if test="record.serverType != null">
        server_type = #{record.serverType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update vpn_server
    set id = #{record.id,jdbcType=BIGINT},
      server_ip = #{record.serverIp,jdbcType=VARCHAR},
      server_port = #{record.serverPort,jdbcType=CHAR},
      encryption_type = #{record.encryptionType,jdbcType=VARCHAR},
      server_region = #{record.serverRegion,jdbcType=VARCHAR},
      server_status = #{record.serverStatus,jdbcType=INTEGER},
      description = #{record.description,jdbcType=VARCHAR},
      server_line = #{record.serverLine,jdbcType=VARCHAR},
      server_type = #{record.serverType,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnServer">
    update vpn_server
    <set>
      <if test="serverIp != null">
        server_ip = #{serverIp,jdbcType=VARCHAR},
      </if>
      <if test="serverPort != null">
        server_port = #{serverPort,jdbcType=CHAR},
      </if>
      <if test="encryptionType != null">
        encryption_type = #{encryptionType,jdbcType=VARCHAR},
      </if>
      <if test="serverRegion != null">
        server_region = #{serverRegion,jdbcType=VARCHAR},
      </if>
      <if test="serverStatus != null">
        server_status = #{serverStatus,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="serverLine != null">
        server_line = #{serverLine,jdbcType=VARCHAR},
      </if>
      <if test="serverType != null">
        server_type = #{serverType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnServer">
    update vpn_server
    set server_ip = #{serverIp,jdbcType=VARCHAR},
      server_port = #{serverPort,jdbcType=CHAR},
      encryption_type = #{encryptionType,jdbcType=VARCHAR},
      server_region = #{serverRegion,jdbcType=VARCHAR},
      server_status = #{serverStatus,jdbcType=INTEGER},
      description = #{description,jdbcType=VARCHAR},
      server_line = #{serverLine,jdbcType=VARCHAR},
      server_type = #{serverType,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>