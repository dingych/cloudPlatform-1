<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qxxg.springcloud.cloudmbg.mapper.VpnPackageMapper">
  <resultMap id="BaseResultMap" type="com.qxxg.springcloud.cloudmbg.entity.VpnPackage">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="pk_duration" jdbcType="INTEGER" property="pkDuration" />
    <result column="pk_type" jdbcType="INTEGER" property="pkType" />
    <result column="pk_name" jdbcType="VARCHAR" property="pkName" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="pk_bandwidth" jdbcType="DOUBLE" property="pkBandwidth" />
    <result column="pk_flow" jdbcType="DOUBLE" property="pkFlow" />
    <result column="pk_amount" jdbcType="BIGINT" property="pkAmount" />
    <result column="pk_discount" jdbcType="INTEGER" property="pkDiscount" />
    <result column="is_delete" jdbcType="INTEGER" property="isDelete" />
    <result column="valid_time" jdbcType="TIMESTAMP" property="validTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, pk_duration, pk_type, pk_name, create_time, description, pk_bandwidth, pk_flow, 
    pk_amount, pk_discount, is_delete, valid_time
  </sql>
  <select id="selectByExample" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnPackageExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from vpn_package
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from vpn_package
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from vpn_package
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnPackageExample">
    delete from vpn_package
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnPackage">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into vpn_package (pk_duration, pk_type, pk_name, 
      create_time, description, pk_bandwidth, 
      pk_flow, pk_amount, pk_discount, 
      is_delete, valid_time)
    values (#{pkDuration,jdbcType=INTEGER}, #{pkType,jdbcType=INTEGER}, #{pkName,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{description,jdbcType=VARCHAR}, #{pkBandwidth,jdbcType=DOUBLE}, 
      #{pkFlow,jdbcType=DOUBLE}, #{pkAmount,jdbcType=BIGINT}, #{pkDiscount,jdbcType=INTEGER}, 
      #{isDelete,jdbcType=INTEGER}, #{validTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnPackage">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into vpn_package
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="pkDuration != null">
        pk_duration,
      </if>
      <if test="pkType != null">
        pk_type,
      </if>
      <if test="pkName != null">
        pk_name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="pkBandwidth != null">
        pk_bandwidth,
      </if>
      <if test="pkFlow != null">
        pk_flow,
      </if>
      <if test="pkAmount != null">
        pk_amount,
      </if>
      <if test="pkDiscount != null">
        pk_discount,
      </if>
      <if test="isDelete != null">
        is_delete,
      </if>
      <if test="validTime != null">
        valid_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="pkDuration != null">
        #{pkDuration,jdbcType=INTEGER},
      </if>
      <if test="pkType != null">
        #{pkType,jdbcType=INTEGER},
      </if>
      <if test="pkName != null">
        #{pkName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="pkBandwidth != null">
        #{pkBandwidth,jdbcType=DOUBLE},
      </if>
      <if test="pkFlow != null">
        #{pkFlow,jdbcType=DOUBLE},
      </if>
      <if test="pkAmount != null">
        #{pkAmount,jdbcType=BIGINT},
      </if>
      <if test="pkDiscount != null">
        #{pkDiscount,jdbcType=INTEGER},
      </if>
      <if test="isDelete != null">
        #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="validTime != null">
        #{validTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnPackageExample" resultType="java.lang.Long">
    select count(*) from vpn_package
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update vpn_package
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.pkDuration != null">
        pk_duration = #{record.pkDuration,jdbcType=INTEGER},
      </if>
      <if test="record.pkType != null">
        pk_type = #{record.pkType,jdbcType=INTEGER},
      </if>
      <if test="record.pkName != null">
        pk_name = #{record.pkName,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.pkBandwidth != null">
        pk_bandwidth = #{record.pkBandwidth,jdbcType=DOUBLE},
      </if>
      <if test="record.pkFlow != null">
        pk_flow = #{record.pkFlow,jdbcType=DOUBLE},
      </if>
      <if test="record.pkAmount != null">
        pk_amount = #{record.pkAmount,jdbcType=BIGINT},
      </if>
      <if test="record.pkDiscount != null">
        pk_discount = #{record.pkDiscount,jdbcType=INTEGER},
      </if>
      <if test="record.isDelete != null">
        is_delete = #{record.isDelete,jdbcType=INTEGER},
      </if>
      <if test="record.validTime != null">
        valid_time = #{record.validTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update vpn_package
    set id = #{record.id,jdbcType=BIGINT},
      pk_duration = #{record.pkDuration,jdbcType=INTEGER},
      pk_type = #{record.pkType,jdbcType=INTEGER},
      pk_name = #{record.pkName,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      description = #{record.description,jdbcType=VARCHAR},
      pk_bandwidth = #{record.pkBandwidth,jdbcType=DOUBLE},
      pk_flow = #{record.pkFlow,jdbcType=DOUBLE},
      pk_amount = #{record.pkAmount,jdbcType=BIGINT},
      pk_discount = #{record.pkDiscount,jdbcType=INTEGER},
      is_delete = #{record.isDelete,jdbcType=INTEGER},
      valid_time = #{record.validTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnPackage">
    update vpn_package
    <set>
      <if test="pkDuration != null">
        pk_duration = #{pkDuration,jdbcType=INTEGER},
      </if>
      <if test="pkType != null">
        pk_type = #{pkType,jdbcType=INTEGER},
      </if>
      <if test="pkName != null">
        pk_name = #{pkName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="pkBandwidth != null">
        pk_bandwidth = #{pkBandwidth,jdbcType=DOUBLE},
      </if>
      <if test="pkFlow != null">
        pk_flow = #{pkFlow,jdbcType=DOUBLE},
      </if>
      <if test="pkAmount != null">
        pk_amount = #{pkAmount,jdbcType=BIGINT},
      </if>
      <if test="pkDiscount != null">
        pk_discount = #{pkDiscount,jdbcType=INTEGER},
      </if>
      <if test="isDelete != null">
        is_delete = #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="validTime != null">
        valid_time = #{validTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qxxg.springcloud.cloudmbg.entity.VpnPackage">
    update vpn_package
    set pk_duration = #{pkDuration,jdbcType=INTEGER},
      pk_type = #{pkType,jdbcType=INTEGER},
      pk_name = #{pkName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      description = #{description,jdbcType=VARCHAR},
      pk_bandwidth = #{pkBandwidth,jdbcType=DOUBLE},
      pk_flow = #{pkFlow,jdbcType=DOUBLE},
      pk_amount = #{pkAmount,jdbcType=BIGINT},
      pk_discount = #{pkDiscount,jdbcType=INTEGER},
      is_delete = #{isDelete,jdbcType=INTEGER},
      valid_time = #{validTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>